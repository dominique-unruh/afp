title = "Unification Utilities for Isabelle/ML"
date = 2023-09-19
topics = [
  "Tools",
]
abstract = """
This article provides various unification utilities for Isabelle/ML, most prominently:
<ol>
<li>First-order and higher-order pattern
<a href=\"https://en.wikipedia.org/wiki/Unification_(computer_science)#E-unification\">E-unification</a>
and E-matching.
While unifiers in Isabelle/ML only consider the $\\alpha\\beta\\eta$-equational theory of the $\\lambda$-calculus,
unifiers in this article
may take an extra background theory, in the form of an equational prover, into account.
For example, the unification problem $n + 1 \\equiv {}?m + Suc\\; 0$
may be solved by providing a prover for the background theory $\\forall n.\\ n + 1 \\equiv n + Suc\\; 0$.</li>
<li>Tactics, methods, and attributes with adjustable unifiers (e.g.\\ resolution, fact, assumption, OF).</li>
<li>A generalisation of <a href=\"https://doi.org/10.1007/978-3-642-03359-9_8\">unification hints</a>.
Unification hints are a flexible extension for unifiers.
Among other things, they can be used for reflective tactics,
to provide canonical unification instances,
or to simply strengthen the background theory of a unifier in a controlled manner.</li>
<li>Simplifier integration for e-unifiers.</li>
<li>Practical combinations of unification algorithms, e.g. a combination of first-order and
higher-order pattern unification.</li>
<li>A hierarchical logger for Isabelle/ML,
including per logger configurations with log levels, output channels, message filters.</li>
</ol>
While this entry works with every object logic,
some extra setup for Isabelle/HOL and application examples are provided.
All unifiers are tested with <a href=\"https://isa-afp.org/entries/SpecCheck.html\">SpecCheck</a>."""
license = "bsd"
note = ""

[authors]

[authors.kappelmann]
email = "kappelmann_email"

[contributors]

[notify]
kappelmann = "kappelmann_email"

[history]

[extra]

[related]
dois = []
pubs = []

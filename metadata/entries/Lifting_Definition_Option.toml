title = "Lifting Definition Option"
date = 2014-10-13
topics = [
  "Computer science/Functional programming",
]
abstract = """
We implemented a command that can be used to easily generate
elements of a restricted type <tt>{x :: 'a. P x}</tt>,
provided the definition is of the form
<tt>f ys = (if check ys then Some(generate ys :: 'a) else None)</tt> where
<tt>ys</tt> is a list of variables <tt>y1 ... yn</tt> and
<tt>check ys ==> P(generate ys)</tt> can be proved.
<p>
In principle, such a definition is also directly possible using the
<tt>lift_definition</tt> command. However, then this definition will not be
suitable for code-generation. To this end, we automated a more complex
construction of Joachim Breitner which is amenable for code-generation, and
where the test <tt>check ys</tt> will only be performed once.  In the
automation, one auxiliary type is created, and Isabelle's lifting- and
transfer-package is invoked several times."""
license = "lgpl"
note = ""

[authors]

[authors.thiemann]
homepage = "thiemann_homepage"

[contributors]

[notify]
thiemann = "thiemann_email"

[history]

[extra]

[related]
